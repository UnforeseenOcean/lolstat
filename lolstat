#!/usr/bin/env bash

#.o+°"°+o._.o+° 
#             / 
#   LOL STAT  > 
#             \ 
#.o+°"°+o._.o+°`

# https://github.com/chiptune/lolstat

ver="0.4.2"

tmp="/dev/shm/lolstat-" # tmp file path
timer=2          # use i3status.conf interval
tmax=2           # max time for curl call
tout=2           # curl connection timeout

s0="\u0020"      # space
s1="${s0}|${s0}" # separator
l0="\u25cb"      # led off
l1="\u25c9"      # led on
dead="\u2620"    # he's dead jim
ok="\u263a"      # ok status
nok="\u2639"     # not ok status
arw="\u27a9"     # arrow
wave="\u223f"    # wave

# unicode glyphs
home="\u2302"
cloud="\u2601"
data="\u26c0"

#warn="\u26a0"    # warning
#kbd="\u2328"     # keyboard
#star="\u2605"    # star

# cmd 2>/dev/null # send output to hell

n=$(($(cat "${tmp}count" 2>/dev/null)))
if [ ${n} -eq 0 ]; then n=0; fi
if [ ${n} -eq 150 ]; then n=0; fi
echo $((n+1)) > "${tmp}count"

ts=$(date "+%s%N")
ts_p=$(cut -d' ' -f1 < "${tmp}time")
if [ "${ts_p}" -eq 0 ]; then ts_p=${ts}; ts=$((ts+1000000)); fi
echo -ne "${ts} ${ts_p}" > "${tmp}time"
t=$(mawk '{printf "%.*f",3,$1/1000000000}' <<< $((ts-ts_p)))

if [ -f "${tmp}ver" ]; then
  if [ "${ver}" != "$(< "${tmp}ver")" ]; then rm "${tmp}"*; fi
else
  echo "${ver}" > ${tmp}'ver'
fi

if [ ${n} -eq 0 ]; then
  curl -o "${tmp}ip" -s "http://ipecho.net/plain"\
  -m ${tmax} --connect-timeout ${tout}
  curl -o "${tmp}geo" -s "https://freegeoip.net/json/$(cat "${tmp}ip")"\
  -m ${tmax} --connect-timeout ${tout}
fi

function bar()
  {
  bar="▯▯▯▯▯▯"
  if   [ "${1}" -gt 90 ]; then bar="▮▮▮▮▮▮";
  elif [ "${1}" -gt 74 ]; then bar="▮▮▮▮▮▯";
  elif [ "${1}" -gt 58 ]; then bar="▮▮▮▮▯▯";
  elif [ "${1}" -gt 42 ]; then bar="▮▮▮▯▯▯";
  elif [ "${1}" -gt 26 ]; then bar="▮▮▯▯▯▯";
  elif [ "${1}" -gt 10 ]; then bar="▮▯▯▯▯▯";
  fi
  echo -ne "${bar}${1}%"
  }

function upd() # countdown to next update
  {
  echo -ne "$(printf '%03d' $(((150-n)*timer)))"
  }

function disk()
  {
  data=$(df 2>/dev/null | grep -m 1 "${1}")
  if [ -n "${data}" ]; then
    echo -ne "${2}$(mawk '{FS=" "}{printf "%.*f",1,100/($3+$4)*$3}' <<< "${data}")%"
  fi
  }

function io()
  {
  if [ -r "/sys/block/${1}/stat" ]; then
    if [ ${n} -eq 0 ]; then mawk '{print $3,$7}' < "/sys/block/${1}/stat" > "${tmp}io"; fi
    data=$(mawk '{print $3,$7}' < "/sys/block/${1}/stat")" "$(mawk '{print $1,$2}' < "${tmp}io");
    echo "${data}" > "${tmp}io"
    bs=$(cat "/sys/block/${1}/queue/physical_block_size") #sudo dd if=/dev/sda1 of=/dev/null count=1
    io=$(mawk 'BEGIN{FS=" ";r='"${bs}"'/1024/'"${t}"'}{printf "%s%03d'"${s0}"'%s%03d",($1-$3<r)?"'"${l0}"'":"'"${l1}"'",($1-$3)*r,($2-$4<r)?"'"${l0}"'":"'"${l1}"'",($2-$4)*r}' <<< "${data}")
  else
    io="?"
  fi
  echo -ne "${1}${arw}${io}"
  }

function cpu()
  {
  # user nice system idle iowait irq softirq
  data=$(mawk '/cpu\ /{printf "%.*f %.*f",0,$2+$3+$4,0,$2+$3+$4+$5}' < /proc/stat)' '$(mawk '{print $1,$2}' < "${tmp}cpu")
  echo -ne "${data}" > "${tmp}cpu"
  cpu=$(mawk 'BEGIN{FS=" "}{printf "%02d",100/($2-$4)*($1-$3)}' <<< "${data}")
  freq=$(lscpu | mawk '/CPU\ MHz/{printf "%04dMHz",$NF}')
  if [ "${1}" ]; then
    echo -ne "CPU${s0}${freq}${arw}$(bar "${cpu}")"
  else
    echo -ne "CPU${arw}$(bar "${cpu}")"
  fi
  }

function ram()
  {
  total=$(mawk '/MemTotal/{print $2}' /proc/meminfo)
  free=$(mawk '/MemFree/{print $2}' /proc/meminfo)
  ram=$(mawk 'BEGIN{FS=" "}{printf "%02d",100/$1*($1-$2)}' <<< "${total} ${free}")
  echo -ne "RAM${arw}$(bar "${ram}")"
  }

function netw()
  {
  if [ ${n} -eq 0 ]; then
    rm "${tmp}netw" 2>/dev/null
    /sbin/ifconfig -s | tail -n +2 | cut -d' ' -f1 | while read i;
    do
      data=$(/sbin/ifconfig "${i}" | tail -n +2)
      ip=$(echo "${data}" | grep "inet\ " | mawk '{print $2}')
      if [ "${ip}" = "127.0.0.1" ]; then continue; fi
      echo -e "${i} ${ip}" >> "${tmp}netw"
      rx=$(cat "/sys/class/net/${i}/statistics/rx_bytes")
      tx=$(cat "/sys/class/net/${i}/statistics/tx_bytes")
      echo -ne "${rx} ${tx}" > "${tmp}netw-${i}"
    done
  fi
  while read i;
  do
    nw=$(echo "$i" | cut -d' ' -f1)
    ip=$(echo "$i" | cut -d' ' -f2)
    rx=$(cat "/sys/class/net/${nw}/statistics/rx_bytes")
    tx=$(cat "/sys/class/net/${nw}/statistics/tx_bytes")
    rt_dat="${rx} ${tx} $(mawk '{print $1,$2}' < "${tmp}netw-${nw}")"
    echo -ne "${rt_dat}" > "${tmp}netw-${nw}"
    rt=$(mawk 'BEGIN{FS=" ";r=1024*'"${t}"'}{printf "%s%05.*f'${s0}'%s%05.*f",($1==$3)?"'${l0}'":"'${l1}'",1,($1-$3)/r,($2==$4)?"'${l0}'":"'${l1}'",1,($2-$4)/r}' <<< "${rt_dat}")
    data=$(/sbin/iwconfig "${nw}" 2>/dev/null)
    if [ -z "${data}" ]; then
      echo -ne "${s1}${nw}${arw}${ip}${s0}${rt}"
    else
      ssid=$(sed -ne 's/.*ESSID:"*\([^ ]*\).*"\ \ /\1/p' <<< "${data}")
      q=$(sed -ne 's/.*Link\ Quality="*\([^ ]*\).*/\1/p' <<< "${data}" | mawk 'BEGIN{FS="/"}{printf "%02d",100/$2*$1}')
      #br=$(printf "%02dMb/s" "$(sed -ne 's/.*Bit\ Rate="*\([^ ]*\).*/\1/p' <<< "${data}")") # Mb/s
      echo -ne "${s1}${nw}${arw}${ssid}${wave}$(bar "${q}")${s0}${rt}"
    fi
  done < "${tmp}netw"
  }

function url()
  {
  if [ ${n} -eq 0 ]; then
    ping -c1 "$1" | mawk '/time\=/{print $(NF-1)}' | sed -e 's/time=//' > "${tmp}ping-$1"
  fi
  time=$(cat "${tmp}ping-$1" 2>/dev/null)
  name=$1; if [ "$2" ]; then name=$2; fi
  if [ "${time}" == "" ]; then
    time="${dead}"
  else
    time=$(mawk '{printf "%s%04.*f",($1<100)?"'${ok}'":"'${nok}'",2,$1/1000}' <<< "${time}")
  fi
  echo -ne "${name}${s0}${time}"
  }

function weather()
  {
  if [ ${n} -eq 0 ]; then
    coord=$(cat "${tmp}geo")
    lat=$(echo -ne "${coord}" | sed -e 's/.*"latitude":\([^,]*\).*/\1/')
    lon=$(echo -ne "${coord}" | sed -e 's/.*"longitude":\([^,]*\).*/\1/')
    data=$(curl -s "http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&APPID=c8236a643beb666d2042d55869b69258" -m "${tmax}" --connect-timeout "${tout}")
    temp=$(echo -ne "${data}" | sed -ne 's/.*"temp":"*\([^ ]*\).*",/\1/p' | mawk '{printf "%02.*f",1,$1}')
    code=$(echo "${data}" | sed -e 's/.*"icon":"\([^"]*\).*/\1/')
    case "${code}" in
      "01d"|"01n") icon="\u2600";; # clear sky
      "02d"|"02n") icon="\u2601";; # few clouds
      "03d"|"03n") icon="\u2601";; # scattered clouds
      "04d"|"04n") icon="\u2601";; # broken clouds
      "09d"|"09n") icon="\u2602";; # shower rain
      "10d"|"10n") icon="\u2614";; # rain
      "11d"|"11n") icon="\u2608";; # thunderstorm
      "13d"|"13n") icon="\u2603";; # snow
    esac
    echo "${icon}${temp}°" > "${tmp}weather"
  fi
  echo -ne "$(cat "${tmp}weather" 2>/dev/null)"
  }

function clock()
  {
  echo -ne "$(date "+%d/%m${s0}%H:%M")" # \u231a${s0}
  }

function window()
  {
  id=$(xprop -root 2>/dev/null | mawk '/_NET_ACTIVE_WINDOW\(WINDOW\)/{print $NF}')
  xprop -id "${id}" | mawk '/WM_NAME\(STRING\)/{$1=$2="";print}' | cut -d'"' -f2
  }

function power()
  {
  if [ "$(which acpi)" ]; then
    if [ ${n} -eq 0 ]; then
      acpi -V | head -1 | cut -d',' -f2 | sed -e 's/%//' > "${tmp}power";
    fi
    echo -ne "\u26a1$(($(cat "${tmp}power" 2>/dev/null)))%"
  fi
  }

function mixer()
  {
  # TODO: replace by "--" if mute
  if [ "$(which amixer)" ]; then
    lvl=$(amixer get "${1}" | tail -1 | cut -d'[' -f2 | cut -d'%' -f1)
    echo -ne "\u266c$(mawk 'BEGIN{printf "%02d",'"${lvl}"'}')%";
  fi
  }

# my current setup
echo -ne "\
${USER}${s1}\
$(disk "/dev/sda" "/")${s0}\
$(disk "/home" "${home}")${s0}\
$(disk "/cloud" "${cloud}")${s0}\
$(disk "/data" "${data}")${s1}\
$(io "sda")${s1}\
$(cpu "")${s0}\
$(ram)\
$(netw)${s1}\
$(url "poulet.zoy.org" "zoy")${s1}\
$(clock)${s0}\
$(weather)${s1}\
$(power)${s0}\
$(mixer "Master")\
"

exit
